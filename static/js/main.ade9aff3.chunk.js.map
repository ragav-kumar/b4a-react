{"version":3,"sources":["queries/__generated__/queries_LogInMutation.graphql.js","queries/__generated__/queries_GetAllPostsQuery.graphql.js","queries/__generated__/queries_submitPostMutation.graphql.js","queries/queries.ts","relayEnvironment.ts","Common.tsx","Form/PostForm.tsx","Form/SubmitPost.tsx","Context.ts","User/LogInForm.tsx","User/UserDisplay.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["node","v0","v1","hash","module","exports","v2","v3","v4","logInQuery","getAllPostsQuery","submitPostQuery","API","uri","process","applicationID","key","generateFetch","sessionToken","headers","length","params","variables","a","console","log","name","JSON","stringify","fetch","method","body","query","text","response","json","loggedOutEnvironment","Environment","network","Network","create","store","Store","RecordSource","createLoggedInEnvironment","StyledForm","styled","Form","initialValues","content","likes","showComments","postFormSchema","Yup","shape","required","integer","PostForm","props","onSubmit","validationSchema","as","type","value","SubmitPost","useState","environment","setEnvironment","useEffect","AppContext","React","createContext","username","loggedInEnvironment","InvalidMessage","div","ModalHeader","Modal","Header","ModalBody","Body","loginSchema","password","LogInForm","isInvalid","isLoggedIn","show","onHide","closeButton","Title","Wrap","loggedIn","UserDisplay","handleLogin","showModal","setShowModal","context","useContext","onClick","Viewport","Wrapper","children","App","setSessionToken","setUsername","loginInvalid","setLoginInvalid","loggedInEnv","setLoggedInEnv","updatePostList","setUpdatePostList","Provider","values","form","commitMutation","mutation","onCompleted","errors","logIn","setSubmitting","onError","err","tags","alert","resetForm","isUpdate","render","src","theme","enableClipboard","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ade9aff3.chunk.js","sourcesContent":["/**\n * @flow\n * @relayHash da446786096d11f7caac2fad94a92b04\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type queries_LogInMutationVariables = {|\n  username: string,\n  password: string,\n|};\nexport type queries_LogInMutationResponse = {|\n  +logIn: {|\n    +id: string,\n    +username: ?string,\n    +sessionToken: string,\n  |}\n|};\nexport type queries_LogInMutation = {|\n  variables: queries_LogInMutationVariables,\n  response: queries_LogInMutationResponse,\n|};\n*/\n\n\n/*\nmutation queries_LogInMutation(\n  $username: String!\n  $password: String!\n) {\n  logIn(fields: {username: $username, password: $password}) {\n    id\n    username\n    sessionToken\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = [\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"username\",\n    \"type\": \"String!\",\n    \"defaultValue\": null\n  },\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"password\",\n    \"type\": \"String!\",\n    \"defaultValue\": null\n  }\n],\nv1 = [\n  {\n    \"kind\": \"LinkedField\",\n    \"alias\": null,\n    \"name\": \"logIn\",\n    \"storageKey\": null,\n    \"args\": [\n      {\n        \"kind\": \"ObjectValue\",\n        \"name\": \"fields\",\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"password\",\n            \"variableName\": \"password\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"username\",\n            \"variableName\": \"username\"\n          }\n        ]\n      }\n    ],\n    \"concreteType\": \"Viewer\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"id\",\n        \"args\": null,\n        \"storageKey\": null\n      },\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"username\",\n        \"args\": null,\n        \"storageKey\": null\n      },\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"sessionToken\",\n        \"args\": null,\n        \"storageKey\": null\n      }\n    ]\n  }\n];\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"queries_LogInMutation\",\n    \"type\": \"Mutation\",\n    \"metadata\": null,\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v1/*: any*/)\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"queries_LogInMutation\",\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"operationKind\": \"mutation\",\n    \"name\": \"queries_LogInMutation\",\n    \"id\": null,\n    \"text\": \"mutation queries_LogInMutation(\\n  $username: String!\\n  $password: String!\\n) {\\n  logIn(fields: {username: $username, password: $password}) {\\n    id\\n    username\\n    sessionToken\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = '1d24e4027dabd0c6b8ea380ad6b797be';\n\nmodule.exports = node;\n","/**\n * @flow\n * @relayHash b2546904b52908cb0477d244de84a85f\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type queries_GetAllPostsQueryVariables = {||};\nexport type queries_GetAllPostsQueryResponse = {|\n  +posts: {|\n    +count: number,\n    +results: $ReadOnlyArray<{|\n      +createdAt: any,\n      +content: ?string,\n      +likes: ?number,\n      +showComments: ?boolean,\n    |}>,\n  |}\n|};\nexport type queries_GetAllPostsQuery = {|\n  variables: queries_GetAllPostsQueryVariables,\n  response: queries_GetAllPostsQueryResponse,\n|};\n*/\n\n\n/*\nquery queries_GetAllPostsQuery {\n  posts {\n    count\n    results {\n      createdAt\n      content\n      likes\n      showComments\n      id\n    }\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"count\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv1 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"createdAt\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv2 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"content\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv3 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"likes\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv4 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"showComments\",\n  \"args\": null,\n  \"storageKey\": null\n};\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"queries_GetAllPostsQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"posts\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"PostFindResult\",\n        \"plural\": false,\n        \"selections\": [\n          (v0/*: any*/),\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"results\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"Post\",\n            \"plural\": true,\n            \"selections\": [\n              (v1/*: any*/),\n              (v2/*: any*/),\n              (v3/*: any*/),\n              (v4/*: any*/)\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"queries_GetAllPostsQuery\",\n    \"argumentDefinitions\": [],\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": null,\n        \"name\": \"posts\",\n        \"storageKey\": null,\n        \"args\": null,\n        \"concreteType\": \"PostFindResult\",\n        \"plural\": false,\n        \"selections\": [\n          (v0/*: any*/),\n          {\n            \"kind\": \"LinkedField\",\n            \"alias\": null,\n            \"name\": \"results\",\n            \"storageKey\": null,\n            \"args\": null,\n            \"concreteType\": \"Post\",\n            \"plural\": true,\n            \"selections\": [\n              (v1/*: any*/),\n              (v2/*: any*/),\n              (v3/*: any*/),\n              (v4/*: any*/),\n              {\n                \"kind\": \"ScalarField\",\n                \"alias\": null,\n                \"name\": \"id\",\n                \"args\": null,\n                \"storageKey\": null\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  \"params\": {\n    \"operationKind\": \"query\",\n    \"name\": \"queries_GetAllPostsQuery\",\n    \"id\": null,\n    \"text\": \"query queries_GetAllPostsQuery {\\n  posts {\\n    count\\n    results {\\n      createdAt\\n      content\\n      likes\\n      showComments\\n      id\\n    }\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = '7e75fa148f84b8e0f90afafe766c2873';\n\nmodule.exports = node;\n","/**\n * @flow\n * @relayHash 9aedafd54ee87f0cff36035b69ede2e8\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type queries_submitPostMutationVariables = {|\n  content?: ?string,\n  likes?: ?number,\n  tags?: ?$ReadOnlyArray<?any>,\n  showComments?: ?boolean,\n|};\nexport type queries_submitPostMutationResponse = {|\n  +createPost: {|\n    +id: string\n  |}\n|};\nexport type queries_submitPostMutation = {|\n  variables: queries_submitPostMutationVariables,\n  response: queries_submitPostMutationResponse,\n|};\n*/\n\n\n/*\nmutation queries_submitPostMutation(\n  $content: String\n  $likes: Float\n  $tags: [Any]\n  $showComments: Boolean\n) {\n  createPost(fields: {content: $content, likes: $likes, tags: $tags, showComments: $showComments}) {\n    id\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = [\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"content\",\n    \"type\": \"String\",\n    \"defaultValue\": null\n  },\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"likes\",\n    \"type\": \"Float\",\n    \"defaultValue\": null\n  },\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"tags\",\n    \"type\": \"[Any]\",\n    \"defaultValue\": null\n  },\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"showComments\",\n    \"type\": \"Boolean\",\n    \"defaultValue\": null\n  }\n],\nv1 = [\n  {\n    \"kind\": \"LinkedField\",\n    \"alias\": null,\n    \"name\": \"createPost\",\n    \"storageKey\": null,\n    \"args\": [\n      {\n        \"kind\": \"ObjectValue\",\n        \"name\": \"fields\",\n        \"fields\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"content\",\n            \"variableName\": \"content\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"likes\",\n            \"variableName\": \"likes\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"showComments\",\n            \"variableName\": \"showComments\"\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"tags\",\n            \"variableName\": \"tags\"\n          }\n        ]\n      }\n    ],\n    \"concreteType\": \"Post\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"kind\": \"ScalarField\",\n        \"alias\": null,\n        \"name\": \"id\",\n        \"args\": null,\n        \"storageKey\": null\n      }\n    ]\n  }\n];\nreturn {\n  \"kind\": \"Request\",\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"queries_submitPostMutation\",\n    \"type\": \"Mutation\",\n    \"metadata\": null,\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v1/*: any*/)\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"queries_submitPostMutation\",\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"operationKind\": \"mutation\",\n    \"name\": \"queries_submitPostMutation\",\n    \"id\": null,\n    \"text\": \"mutation queries_submitPostMutation(\\n  $content: String\\n  $likes: Float\\n  $tags: [Any]\\n  $showComments: Boolean\\n) {\\n  createPost(fields: {content: $content, likes: $likes, tags: $tags, showComments: $showComments}) {\\n    id\\n  }\\n}\\n\",\n    \"metadata\": {}\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = 'f20edcdfe13d3876a206a82433f670c7';\n\nmodule.exports = node;\n","import { graphql } from 'babel-plugin-relay/macro';\r\nimport { OperationType, MutationParameters } from 'relay-runtime';\r\n// Attempt to log in the user\r\nexport const logInQuery = graphql`\r\n\tmutation queries_LogInMutation($username:String!, $password:String!) {\r\n\t\tlogIn(fields:{\r\n\t\t\tusername: $username\r\n\t\t\tpassword: $password\r\n\t\t}){\r\n\t\t\tid,\r\n\t\t\tusername,\r\n\t\t\tsessionToken\r\n\t\t}\r\n\t}\r\n`;\r\n// OperationType for logInQuery. I could have extended OperationType with no difference.\r\nexport interface LogInOperation extends MutationParameters {\r\n\tvariables: {\r\n\t\tusername: string;\r\n\t\tpassword: string;\r\n\t};\r\n\tresponse: {\r\n\t\tlogIn: {\r\n\t\t\tid: string;\r\n\t\t\tusername: string;\r\n\t\t\tsessionToken: string;\r\n\t\t}\r\n\t};\r\n}\r\n// Retrieve all posts in system\r\nexport const getAllPostsQuery = graphql`\r\n\tquery queries_GetAllPostsQuery {\r\n\t\tposts {\r\n\t\t\tcount,\r\n\t\t\tresults {\r\n\t\t\t\tcreatedAt,\r\n\t\t\t\tcontent,\r\n\t\t\t\tlikes,\r\n\t\t\t\tshowComments\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n// OperationType for getAllPostsQuery. Not actually used...\r\nexport interface GetPostsOperation extends OperationType {\r\n\tvariables: {\r\n\t\tisUpdate: boolean, // Used to trigger refresh\r\n\t};\r\n\tresponse: {\r\n\t\tposts: {\r\n\t\t\tcount: Number;\r\n\t\t\tresults: {\r\n\t\t\t\t[index: number]: {\r\n\t\t\t\t\tcreatedAt: Date;\r\n\t\t\t\t\tcontent: String;\r\n\t\t\t\t\tlikes: Number;\r\n\t\t\t\t\tshowComments: Boolean;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n// Submit a new post, return id of new post\r\nexport const submitPostQuery = graphql`\r\n\tmutation queries_submitPostMutation(\r\n\t\t$content:String,\r\n\t\t$likes:Float,\r\n\t\t$tags:[Any],\r\n\t\t$showComments:Boolean\r\n\t) {\r\n\t\tcreatePost(fields: {\r\n\t\t\tcontent: $content,\r\n\t\t\tlikes: $likes,\r\n\t\t\ttags: $tags,\r\n\t\t\tshowComments: $showComments\r\n\t\t}) {\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n//OperationType for submitPostQuery\r\nexport interface SubmitPostOperation extends MutationParameters {\r\n\tvariables: {\r\n\t\tcontent: String;\r\n\t\tlikes: Number;\r\n\t\ttags: String[];\r\n\t\tshowComments: Boolean;\r\n\t};\r\n\tresponse: {\r\n\t\tid: String;\r\n\t};\r\n}","import { Environment, Network, RecordSource, Store, Variables, RequestParameters } from \"relay-runtime\";\r\n\r\nconst API = {\r\n\turi: process.env.REACT_APP_GQL_URI ?? \"\",\r\n\tapplicationID: process.env.REACT_APP_GQL_APP_ID ?? \"\",\r\n\tkey: process.env.REACT_APP_GQL_JS_KEY ?? \"\",\r\n};\r\nconst generateFetch = (sessionToken?: string) => {\r\n\tconst headers: HeadersInit = {\r\n\t\t'X-Parse-Application-Id': API.applicationID,\r\n\t\t'X-Parse-Javascript-Key': API.key,\r\n\t\t'Content-Type': 'application/json',\r\n\t};\r\n\tif (sessionToken?.length) {\r\n\t\theaders[\"X-Parse-Session-Token\"] = sessionToken;\r\n\t}\r\n\treturn async (params:RequestParameters, variables:Variables) => {\r\n\t\tconsole.log(`fetching query ${params.name} with ${JSON.stringify(variables)}`);\r\n\t\tconsole.log(\"Headers:\", headers);\r\n\t\tconst response = await fetch(API.uri, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: headers,\r\n\t\t\tbody: JSON.stringify({ query: params.text, variables }),\r\n\t\t});\r\n\t\treturn await response.json();\r\n\t}\r\n}\r\n// Logged Out Environment\r\nexport const loggedOutEnvironment = new Environment({\r\n\tnetwork: Network.create(generateFetch()),\r\n\tstore: new Store(new RecordSource()),\r\n});\r\n// Create logged in environment using sessionToken\r\nexport function createLoggedInEnvironment(sessionToken:string):Environment {\r\n\treturn new Environment({\r\n\t\tnetwork: Network.create(generateFetch(sessionToken)),\r\n\t\tstore: new Store(new RecordSource()),\r\n\t});\r\n}\r\n","import styled from 'styled-components'\nimport {Form} from 'formik'\n\nexport const StyledForm = styled(Form)`\n\tpadding: 1em;\n\tmax-width: 400px;\n\t> * {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: [first] 8em [second] 1fr;\n\t\t\n\t\talign-items: center;\n\t\tspan {\n\t\t\tgrid-area: first;\n\t\t\tdisplay: block;\n\t\t\ttext-align: right;\n\t\t\tpadding-right: 1em;\n\t\t}\n\t\tinput {\n\t\t\tgrid-area: second;\n\t\t\tmargin-top: 5px;\n\t\t\t&[type=submit] {\n\t\t\t\tmax-width: 8em;\n\t\t\t}\n\t\t}\n\t}\n`;","import React from 'react'\nimport { FormikHelpers, Formik, Field } from 'formik'\nimport * as Yup from 'yup'\nimport { StyledForm } from '../Common';\n\nexport interface PostFormState {\n\tcontent: string;\n\tlikes: number | \"\"; // Need to allow empty string otherwise it'll populate by default\n\tshowComments: boolean;\n}\nconst initialValues: PostFormState = {\n\tcontent: \"\",\n\tlikes: \"\",\n\tshowComments: false,\n};\n\ninterface PostFormProps {\n\tonSubmit: (\n\t\tvalues: PostFormState,\n\t\tform: FormikHelpers<PostFormState>\n\t) => void;\n}\nconst postFormSchema = Yup.object().shape<PostFormState>({\n\tcontent: Yup.string().required('Required'),\n\tlikes: Yup.number().integer(),\n\tshowComments: Yup.boolean(),\n});\n\nexport const PostForm = (props: PostFormProps) => (\n\t<Formik\n\t\tinitialValues={initialValues}\n\t\tonSubmit={props.onSubmit}\n\t\tvalidationSchema={postFormSchema}\n\t>\n\t\t{() => (\n\t\t\t<StyledForm>\n\t\t\t\t<label>\n\t\t\t\t\t<span>Content</span>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tname=\"content\"\n\t\t\t\t\t\tas=\"input\"\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\t\t\t\t<label>\n\t\t\t\t\t<span># of Likes</span>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tname=\"likes\"\n\t\t\t\t\t\tas=\"input\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\t\t\t\t<label>\n\t\t\t\t\t<span>Show Comments?</span>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tname=\"showComments\"\n\t\t\t\t\t\tas=\"input\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\t\t\t\t<label>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tname=\"submit\"\n\t\t\t\t\t\tas=\"input\"\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tvalue=\"Submit New Post\"\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\t\t\t</StyledForm>\n\t\t)}\n\t</Formik>\n)\n","import React, { useEffect, useState } from 'react'\nimport { Environment } from 'react-relay';\nimport { createLoggedInEnvironment } from '../relayEnvironment';\nimport { PostForm, PostFormState } from './PostForm';\nimport { FormikHelpers } from 'formik';\n\ninterface SubmitPostProps {\n\tsessionToken: string;\n\tonSubmit: (\n\t\tvalues: PostFormState,\n\t\tform: FormikHelpers<PostFormState>\n\t) => void;\n}\nexport const SubmitPost = ({sessionToken, onSubmit}: SubmitPostProps) => {\n\tconst [environment, setEnvironment] = useState<Environment>();\n\tuseEffect(() => {\n\t\tsetEnvironment(createLoggedInEnvironment(sessionToken));\n\t}, [sessionToken]);\n\t\n\tif (environment) {\n\t\treturn <PostForm onSubmit={onSubmit} />;\n\t} else {\n\t\treturn null;\n\t}\n}\n","import React from 'react'\nimport { Environment } from \"relay-runtime\"\n\nexport interface AppContextProps {\n\tusername: string;\n\tloggedInEnvironment: Environment | null;\n}\nexport const AppContext = React.createContext<AppContextProps>({\n\tusername: \"\",\n\tloggedInEnvironment: null,\n});\n\n","import React from 'react'\nimport {Formik, Field, FormikHelpers} from 'formik'\nimport styled from 'styled-components'\nimport * as Yup from 'yup'\nimport Modal from \"react-bootstrap/Modal\"\nimport { LogInState } from './UserDisplay';\nimport { StyledForm } from '../Common'\n\nconst InvalidMessage = styled.div`\n\tgrid-area: second;\n\tcolor: red;\n\tfont-size: 12px;\n\ttext-align: center;\n`;\nconst ModalHeader = styled(Modal.Header)`\n\tbackground-color: #070707;\n\tcolor: white;\n`;\nconst ModalBody = styled(Modal.Body)`\n\tbackground-color: #070707;\n\tcolor: white;\n`;\n\n\n\nconst loginSchema = Yup.object().shape<LogInState>({\n\tusername: Yup.string().required('Required'),\n\tpassword: Yup.string().required(\"Required\"),\n});\nconst initialValues:LogInState = {\n\tusername: \"\",\n\tpassword: \"\",\n}\ninterface LogInProps {\n\tonSubmit: (\n\t\tvalues: LogInState,\n\t\tform: FormikHelpers<LogInState>\n\t) => void;\n\tisInvalid: Boolean;\n\tisLoggedIn: Boolean;\n\tshow: Boolean;\n\tonHide: () => void;\n}\nexport const LogInForm = ({onSubmit, isInvalid, isLoggedIn, show, onHide}:LogInProps) => (\n\t<Modal show={show} onHide={onHide}>\n\t\t<ModalHeader closeButton>\n\t\t\t<Modal.Title>Log In</Modal.Title>\n\t\t</ModalHeader>\n\t\t<ModalBody>\n\t\t\t<Formik\n\t\t\t\tinitialValues={initialValues}\n\t\t\t\tonSubmit={onSubmit}\n\t\t\t\tvalidationSchema={loginSchema}\n\t\t\t>\n\t\t\t\t{() => (\n\t\t\t\t\t<>{isLoggedIn ? null : \n\t\t\t\t\t<StyledForm>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<span>Username</span>\n\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\t\t\tas=\"input\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<span>Password</span>\n\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\tas=\"input\"\n\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t{isInvalid ?\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<InvalidMessage>Invalid Username / Password</InvalidMessage>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\tname=\"submit\"\n\t\t\t\t\t\t\t\tas=\"input\"\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tvalue=\"Log in\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</StyledForm>\n\t\t\t\t\t}</>\n\t\t\t\t)}\n\t\t\t</Formik>\n\t\t</ModalBody>\n\t</Modal>\n)","import React, { useState, useContext, useEffect } from 'react'\nimport { AppContext } from '../Context';\nimport styled from 'styled-components';\nimport { FormikHelpers } from 'formik';\nimport { LogInForm } from './LogInForm';\n\nexport interface LogInState {\n\tusername: string;\n\tpassword: string;\n}\n\ninterface UserDisplayProps {\n\thandleLogin: (\n\t\tvalues: LogInState,\n\t\tform: FormikHelpers<LogInState>\n\t) => void,\n\tisInvalid: boolean;\n}\n\nconst Wrap = styled.div`\n\tbackground-color: #333;\n\twidth: 100%;\n\tpadding: 5%;\n\tfont-size: 20px;\n\ttext-align: center;\n\tcursor: ${({loggedIn}: {loggedIn: boolean}) => (loggedIn ? \"default\" : \"pointer\")};\n`;\n\nexport const UserDisplay = ({ handleLogin, isInvalid }: UserDisplayProps) => {\n\tconst [showModal, setShowModal] = useState<boolean>(false);\n\tconst context = useContext(AppContext);\n\tconst loggedIn: boolean = !!context.username.length;\n\tuseEffect(() => {\n\t\tif (!!context.username.length) {\n\t\t\tsetShowModal(false);\n\t\t}\n\t}, [context]);\n\n\t\n\treturn (\n\t\t<Wrap loggedIn={loggedIn} onClick={!loggedIn ? () => setShowModal(true) : () => {}}>\n\t\t\t{loggedIn ? `Welcome, ${context.username}` : \"Welcome, User. Click here to log in.\"}\n\t\t\t<LogInForm\n\t\t\t\tonSubmit={handleLogin}\n\t\t\t\tisInvalid={isInvalid}\n\t\t\t\tisLoggedIn={loggedIn}\n\t\t\t\tshow={showModal}\n\t\t\t\tonHide={() => setShowModal(false)}\n\t\t\t/>\n\t\t</Wrap>\n\t)\n}\n","import React,{useState} from 'react'\r\nimport { FormikHelpers } from 'formik'\r\nimport styled from 'styled-components'\r\n\r\nimport { logInQuery, LogInOperation, SubmitPostOperation, submitPostQuery, getAllPostsQuery } from './queries/queries';\r\nimport { loggedOutEnvironment, createLoggedInEnvironment } from './relayEnvironment';\r\nimport { commitMutation, Environment } from 'relay-runtime';\r\nimport { SubmitPost } from './Form/SubmitPost';\r\nimport { AppContext } from './Context';\r\nimport { UserDisplay, LogInState } from './User/UserDisplay';\r\nimport { PostFormState } from './Form/PostForm';\r\nimport { QueryRenderer } from 'react-relay';\r\nimport ReactJson from 'react-json-view';\r\n\r\nconst Wrap = styled.div`\r\n\theight: 100vh;\r\n\tbackground-color: black;\r\n\tcolor: white;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n`;\r\n/**\r\n * Displayed area. Setup to try to simulate a mobile viewport.\r\n */\r\nconst Viewport = styled.div`\r\n\twidth: 100%;\r\n\tmax-width: 480px;\r\n\theight: 100%;\r\n\tmax-height: 853px;\r\n\tborder: 3px double white;\r\n\toverflow-y: scroll;\r\n\tposition: relative;\r\n`;\r\n\r\nconst Wrapper = ({children}: any) => (\r\n\t<Wrap>\r\n\t\t<Viewport>\r\n\t\t\t{children}\r\n\t\t</Viewport>\r\n\t</Wrap>\r\n)\r\n\r\nconst App = () => {\r\n\t// Session token needs to be sent as a header on any logged-in operation\r\n\tconst [sessionToken, setSessionToken] = useState<string>(\"\");\r\n\tconst [username, setUsername] = useState<string>(\"\");\r\n\t// Used to display error message on failed login\r\n\tconst [loginInvalid, setLoginInvalid] = useState<boolean>(false);\r\n\tconst [loggedInEnv, setLoggedInEnv] = useState<Environment|null>(null);\r\n\t// Flipping this flag triggers a post list refresh\r\n\tconst [updatePostList, setUpdatePostList] = useState<boolean>(false);\r\n\r\n\tconst handleLogIn = (values: LogInState, form: FormikHelpers<LogInState>) => {\r\n\t\tcommitMutation<LogInOperation>(loggedOutEnvironment, {\r\n\t\t\tmutation: logInQuery,\r\n\t\t\tvariables: values,\r\n\t\t\tonCompleted: (response, errors) => {\r\n\r\n\t\t\t\tconsole.log(response);\r\n\t\t\t\t\r\n\t\t\t\tsetSessionToken(response.logIn.sessionToken);\r\n\t\t\t\tsetLoggedInEnv(createLoggedInEnvironment(response.logIn.sessionToken));\r\n\t\t\t\tsetUsername(response.logIn.username);\r\n\t\t\t\tform.setSubmitting(false);\r\n\t\t\t},\r\n\t\t\tonError: (err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\tform.setSubmitting(false);\r\n\t\t\t\tsetLoginInvalid(true);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tconst handleSubmitPost = (\r\n\t\tvalues: PostFormState,\r\n\t\tform: FormikHelpers<PostFormState>\r\n\t) => {\r\n\t\tif (loggedInEnv) { // ensure loggedInEnv is not null\r\n\t\t\tcommitMutation<SubmitPostOperation>(loggedInEnv, {\r\n\t\t\t\tmutation: submitPostQuery,\r\n\t\t\t\tvariables: { // need to mess with form state to make it fit\r\n\t\t\t\t\tcontent: values.content,\r\n\t\t\t\t\tlikes: values.likes === \"\" ? 0 : values.likes,\r\n\t\t\t\t\tshowComments: values.showComments,\r\n\t\t\t\t\ttags: [\"UserSubmitted\"],\r\n\t\t\t\t},\r\n\t\t\t\tonCompleted: (response, errors) => {\r\n\t\t\t\t\tconsole.log(response);\r\n\t\t\t\t\talert(\"Post submitted!\");\r\n\t\t\t\t\t// to trigger re-fetch\r\n\t\t\t\t\tsetUpdatePostList(!updatePostList);\r\n\t\t\t\t\tform.setSubmitting(false);\r\n\t\t\t\t\tform.resetForm();\r\n\t\t\t\t},\r\n\t\t\t\tonError: (err) => {\r\n\t\t\t\t\talert(\"Failed to submit post: Login is not valid!\");\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t\tform.setSubmitting(false);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<AppContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tusername: username,\r\n\t\t\t\tloggedInEnvironment: loggedInEnv,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<Wrapper>\r\n\t\t\t\t<UserDisplay\r\n\t\t\t\t\thandleLogin={handleLogIn}\r\n\t\t\t\t\tisInvalid={loginInvalid}\r\n\t\t\t\t/>\r\n\t\t\t\t{!!sessionToken.length ? \r\n\t\t\t\t\t<SubmitPost\r\n\t\t\t\t\t\tsessionToken={sessionToken}\r\n\t\t\t\t\t\tonSubmit={handleSubmitPost}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t: null\r\n\t\t\t\t}\r\n\t\t\t\t<QueryRenderer\r\n\t\t\t\t\tenvironment={loggedOutEnvironment}\r\n\t\t\t\t\tquery={getAllPostsQuery}\r\n\t\t\t\t\tvariables={{\r\n\t\t\t\t\t\tisUpdate: updatePostList,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\trender={({ props }: { props: any }) => (\r\n\t\t\t\t\t\t<ReactJson\r\n\t\t\t\t\t\t\tsrc={props}\r\n\t\t\t\t\t\t\ttheme=\"isotope\"\r\n\t\t\t\t\t\t\tenableClipboard={false}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t/>\r\n\t\t\t</Wrapper>\r\n\t\t</AppContext.Provider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}